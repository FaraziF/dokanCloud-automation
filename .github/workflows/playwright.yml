name: Playwright Tests
on:
  # schedule:
  #   - cron: '0 3 * * *'
  push:
    branches: [main, develop, master]
  pull_request:
    branches: [main, develop, master]

  # workflow can be manually triggered
  workflow_dispatch:

# workflow permissions
permissions:
  checks: write
  contents: read
  issues: write
  pull-requests: write
env:
  TESTING_ENV: M_STAGING
  M_STAGING_ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
  M_STAGING_ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
  M_STAGING_VENDOR_USERNAME: ${{ secrets.VENDOR_USERNAME }}
  M_STAGING_VENDOR_PASSWORD: ${{ secrets.VENDOR_PASSWORD }}
  M_STAGING_CUSTOMER_USERNAME: ${{ secrets.CUSTOMER_USERNAME }}
  M_STAGING_CUSTOMER_PASSWORD: ${{ secrets.CUSTOMER_PASSWORD }}
  M_STAGING_USER_URL: ${{ secrets.USER_URL }}
  M_STAGING_DASHBOARD_URL: ${{ secrets.DASHBOARD_URL }}
  M_STAGING_STOREFRONT_URL: ${{ secrets.STOREFRONT_URL }}
  M_STAGING_CATALOG_URL: ${{ secrets.CATALOG_URL }}
  M_STAGING_BRANDS_URL: ${{ secrets.BRANDS_URL }}
  M_STAGING_SHIPPING_URL: ${{ secrets.SHIPPING_URL }}
  M_STAGING_PAYMENT_URL: ${{ secrets.PAYMENT_URL }}
  M_STAGING_TAX_URL: ${{ secrets.TAX_URL }}
  M_STAGING_REPORT_URL: ${{ secrets.REPORT_URL }}
  M_STAGING_ORDER_URL: ${{ secrets.ORDER_URL }}
  M_STAGING_INTEGRATION_URL: ${{ secrets.INTEGRATION_URL }}
  M_STAGING_CONTENT_URL: ${{ secrets.CONTENT_URL }}
  M_STAGING_COUPON_URL: ${{ secrets.COUPON_URL }}
  M_STAGING_CART_URL: ${{ secrets.CART_URL }}
  # API_TEST_RESULT: './results.json'
  FORCE_COLOR: 1
  API_TEST_RESULT: './playwright-report/api/api-results.json'
  E2E_TEST_RESULT: './playwright-report/e2e/e2e-results.json'
  API_COVERAGE: './playwright-report/api/coverage.json'
  E2E_COVERAGE: './playwright-report/e2e/coverage.json'

jobs:
  test:
    name: All Test
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - name: Get installed Playwright version
        id: playwright-version
        run: |
          cd ./  
          echo "PLAYWRIGHT_VERSION=$(npm ls @playwright/test --json | jq --raw-output '.dependencies["@playwright/test"].version')" >> $GITHUB_ENV

      - name: Get Playwright version
        id: playwright-version1
        run: echo ${{ env.PLAYWRIGHT_VERSION }}

      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Cache
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: Run Playwright e2e tests
        run: npm run test:e2e

      - name: Run Playwright api tests
        if: always()
        run: npm run test:api

      - name: Run Playwright coverage tests
        if: always()
        run: npm run test:coverage

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-test-results
          path: |
            playwright-report
            test-results/

      # Prepare test summary
      - name: Prepare test summary
        id: prepare-test-summary
        uses: actions/github-script@v7
        if: always()
        with:
          result-encoding: string
          script: |
            const script = require("./utils/gitTestSummary.ts")
            return await script({github, context, core})
